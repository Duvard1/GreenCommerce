name: Deploy UpdateUser Microservice to AWS EC2

on:
  push:
    branches:
      - develop
    paths:
      - 'Backend/Domains/Users/UpdateUser/**'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      ## UNIT TEST
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install test dependencies
        run: |
          pip install -r ./Backend/Domains/Users/UpdateUser/requirements.txt


      - name: Set up environment variables
        run: |
          echo "DB_URL=${{ secrets.DB_URL }}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASS=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_PORT=3306" >> $GITHUB_ENV
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV

      - name: Run unit tests
        run: |
          pytest ./Backend/Domains/Users/UpdateUser/tests

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}


      - name: Build and Push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/update-user-service:latest ./Backend/Domains/Users/UpdateUser
          docker push ${{ secrets.DOCKER_USERNAME }}/update-user-service:latest


      - name: SSH and Deploy on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_USERS_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEYPAIR }}
          port: 22
          script: |

            sudo docker stop update-user-service || true
            sudo docker rm update-user-service || true

            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/update-user-service:latest || true


            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/update-user-service:latest


            cd /home/ubuntu
            echo "DB_HOST=${{ secrets.DB_HOST }}" > .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env


            if [ ! -s .env ]; then
              echo "ERROR: .env is empty or was not created correctly"
              exit 1
            fi

            sudo docker run -d --env-file .env -p 8082:8082 --name update-user-service ${{ secrets.DOCKER_USERNAME }}/update-user-service:latest
